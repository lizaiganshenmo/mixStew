// Code generated by Kitex v0.7.2. DO NOT EDIT.

package articleservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	article "github.com/lizaiganshenmo/mixStew/kitex_gen/article"
)

func serviceInfo() *kitex.ServiceInfo {
	return articleServiceServiceInfo
}

var articleServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ArticleService"
	handlerType := (*article.ArticleService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateArticle":     kitex.NewMethodInfo(createArticleHandler, newArticleServiceCreateArticleArgs, newArticleServiceCreateArticleResult, false),
		"UpdateArticle":     kitex.NewMethodInfo(updateArticleHandler, newArticleServiceUpdateArticleArgs, newArticleServiceUpdateArticleResult, false),
		"DeleteArticle":     kitex.NewMethodInfo(deleteArticleHandler, newArticleServiceDeleteArticleArgs, newArticleServiceDeleteArticleResult, false),
		"MGetArticle":       kitex.NewMethodInfo(mGetArticleHandler, newArticleServiceMGetArticleArgs, newArticleServiceMGetArticleResult, false),
		"MGetFeedArticle":   kitex.NewMethodInfo(mGetFeedArticleHandler, newArticleServiceMGetFeedArticleArgs, newArticleServiceMGetFeedArticleResult, false),
		"CommentArticle":    kitex.NewMethodInfo(commentArticleHandler, newArticleServiceCommentArticleArgs, newArticleServiceCommentArticleResult, false),
		"GetArticleComment": kitex.NewMethodInfo(getArticleCommentHandler, newArticleServiceGetArticleCommentArgs, newArticleServiceGetArticleCommentResult, false),
		"DeleteComment":     kitex.NewMethodInfo(deleteCommentHandler, newArticleServiceDeleteCommentArgs, newArticleServiceDeleteCommentResult, false),
		"FavoriteArticle":   kitex.NewMethodInfo(favoriteArticleHandler, newArticleServiceFavoriteArticleArgs, newArticleServiceFavoriteArticleResult, false),
		"UnFavoriteArticle": kitex.NewMethodInfo(unFavoriteArticleHandler, newArticleServiceUnFavoriteArticleArgs, newArticleServiceUnFavoriteArticleResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "article",
		"ServiceFilePath": `idl/article.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func createArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceCreateArticleArgs)
	realResult := result.(*article.ArticleServiceCreateArticleResult)
	success, err := handler.(article.ArticleService).CreateArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceCreateArticleArgs() interface{} {
	return article.NewArticleServiceCreateArticleArgs()
}

func newArticleServiceCreateArticleResult() interface{} {
	return article.NewArticleServiceCreateArticleResult()
}

func updateArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceUpdateArticleArgs)
	realResult := result.(*article.ArticleServiceUpdateArticleResult)
	success, err := handler.(article.ArticleService).UpdateArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceUpdateArticleArgs() interface{} {
	return article.NewArticleServiceUpdateArticleArgs()
}

func newArticleServiceUpdateArticleResult() interface{} {
	return article.NewArticleServiceUpdateArticleResult()
}

func deleteArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceDeleteArticleArgs)
	realResult := result.(*article.ArticleServiceDeleteArticleResult)
	success, err := handler.(article.ArticleService).DeleteArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceDeleteArticleArgs() interface{} {
	return article.NewArticleServiceDeleteArticleArgs()
}

func newArticleServiceDeleteArticleResult() interface{} {
	return article.NewArticleServiceDeleteArticleResult()
}

func mGetArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceMGetArticleArgs)
	realResult := result.(*article.ArticleServiceMGetArticleResult)
	success, err := handler.(article.ArticleService).MGetArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceMGetArticleArgs() interface{} {
	return article.NewArticleServiceMGetArticleArgs()
}

func newArticleServiceMGetArticleResult() interface{} {
	return article.NewArticleServiceMGetArticleResult()
}

func mGetFeedArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceMGetFeedArticleArgs)
	realResult := result.(*article.ArticleServiceMGetFeedArticleResult)
	success, err := handler.(article.ArticleService).MGetFeedArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceMGetFeedArticleArgs() interface{} {
	return article.NewArticleServiceMGetFeedArticleArgs()
}

func newArticleServiceMGetFeedArticleResult() interface{} {
	return article.NewArticleServiceMGetFeedArticleResult()
}

func commentArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceCommentArticleArgs)
	realResult := result.(*article.ArticleServiceCommentArticleResult)
	success, err := handler.(article.ArticleService).CommentArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceCommentArticleArgs() interface{} {
	return article.NewArticleServiceCommentArticleArgs()
}

func newArticleServiceCommentArticleResult() interface{} {
	return article.NewArticleServiceCommentArticleResult()
}

func getArticleCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceGetArticleCommentArgs)
	realResult := result.(*article.ArticleServiceGetArticleCommentResult)
	success, err := handler.(article.ArticleService).GetArticleComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceGetArticleCommentArgs() interface{} {
	return article.NewArticleServiceGetArticleCommentArgs()
}

func newArticleServiceGetArticleCommentResult() interface{} {
	return article.NewArticleServiceGetArticleCommentResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceDeleteCommentArgs)
	realResult := result.(*article.ArticleServiceDeleteCommentResult)
	success, err := handler.(article.ArticleService).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceDeleteCommentArgs() interface{} {
	return article.NewArticleServiceDeleteCommentArgs()
}

func newArticleServiceDeleteCommentResult() interface{} {
	return article.NewArticleServiceDeleteCommentResult()
}

func favoriteArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceFavoriteArticleArgs)
	realResult := result.(*article.ArticleServiceFavoriteArticleResult)
	success, err := handler.(article.ArticleService).FavoriteArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceFavoriteArticleArgs() interface{} {
	return article.NewArticleServiceFavoriteArticleArgs()
}

func newArticleServiceFavoriteArticleResult() interface{} {
	return article.NewArticleServiceFavoriteArticleResult()
}

func unFavoriteArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceUnFavoriteArticleArgs)
	realResult := result.(*article.ArticleServiceUnFavoriteArticleResult)
	success, err := handler.(article.ArticleService).UnFavoriteArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceUnFavoriteArticleArgs() interface{} {
	return article.NewArticleServiceUnFavoriteArticleArgs()
}

func newArticleServiceUnFavoriteArticleResult() interface{} {
	return article.NewArticleServiceUnFavoriteArticleResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateArticle(ctx context.Context, req *article.CreateArticleReq) (r *article.CreateArticleResp, err error) {
	var _args article.ArticleServiceCreateArticleArgs
	_args.Req = req
	var _result article.ArticleServiceCreateArticleResult
	if err = p.c.Call(ctx, "CreateArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateArticle(ctx context.Context, req *article.UpdateArticleReq) (r *article.UpdateArticleResp, err error) {
	var _args article.ArticleServiceUpdateArticleArgs
	_args.Req = req
	var _result article.ArticleServiceUpdateArticleResult
	if err = p.c.Call(ctx, "UpdateArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteArticle(ctx context.Context, req *article.DeleteArticleReq) (r *article.DeleteArticleResp, err error) {
	var _args article.ArticleServiceDeleteArticleArgs
	_args.Req = req
	var _result article.ArticleServiceDeleteArticleResult
	if err = p.c.Call(ctx, "DeleteArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetArticle(ctx context.Context, req *article.MGetArticleReq) (r *article.MGetArticleResp, err error) {
	var _args article.ArticleServiceMGetArticleArgs
	_args.Req = req
	var _result article.ArticleServiceMGetArticleResult
	if err = p.c.Call(ctx, "MGetArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetFeedArticle(ctx context.Context, req *article.MGetFeedArticleReq) (r *article.MGetFeedArticleResp, err error) {
	var _args article.ArticleServiceMGetFeedArticleArgs
	_args.Req = req
	var _result article.ArticleServiceMGetFeedArticleResult
	if err = p.c.Call(ctx, "MGetFeedArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentArticle(ctx context.Context, req *article.CommentArticleReq) (r *article.CommentArticleResp, err error) {
	var _args article.ArticleServiceCommentArticleArgs
	_args.Req = req
	var _result article.ArticleServiceCommentArticleResult
	if err = p.c.Call(ctx, "CommentArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetArticleComment(ctx context.Context, req *article.GetArticleCommentReq) (r *article.GetArticleCommentResp, err error) {
	var _args article.ArticleServiceGetArticleCommentArgs
	_args.Req = req
	var _result article.ArticleServiceGetArticleCommentResult
	if err = p.c.Call(ctx, "GetArticleComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *article.DeleteCommentReq) (r *article.DeleteCommentResp, err error) {
	var _args article.ArticleServiceDeleteCommentArgs
	_args.Req = req
	var _result article.ArticleServiceDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteArticle(ctx context.Context, req *article.FavoriteArticleReq) (r *article.FavoriteArticleResp, err error) {
	var _args article.ArticleServiceFavoriteArticleArgs
	_args.Req = req
	var _result article.ArticleServiceFavoriteArticleResult
	if err = p.c.Call(ctx, "FavoriteArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnFavoriteArticle(ctx context.Context, req *article.UnFavoriteArticleReq) (r *article.UnFavoriteArticleResp, err error) {
	var _args article.ArticleServiceUnFavoriteArticleArgs
	_args.Req = req
	var _result article.ArticleServiceUnFavoriteArticleResult
	if err = p.c.Call(ctx, "UnFavoriteArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
