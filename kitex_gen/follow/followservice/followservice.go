// Code generated by Kitex v0.7.2. DO NOT EDIT.

package followservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	follow "github.com/lizaiganshenmo/mixStew/kitex_gen/follow"
)

func serviceInfo() *kitex.ServiceInfo {
	return followServiceServiceInfo
}

var followServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FollowService"
	handlerType := (*follow.FollowService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Follow":     kitex.NewMethodInfo(followHandler, newFollowServiceFollowArgs, newFollowServiceFollowResult, false),
		"UnFollow":   kitex.NewMethodInfo(unFollowHandler, newFollowServiceUnFollowArgs, newFollowServiceUnFollowResult, false),
		"IsFollow":   kitex.NewMethodInfo(isFollowHandler, newFollowServiceIsFollowArgs, newFollowServiceIsFollowResult, false),
		"FollowList": kitex.NewMethodInfo(followListHandler, newFollowServiceFollowListArgs, newFollowServiceFollowListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "follow",
		"ServiceFilePath": `idl/follow.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func followHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceFollowArgs)
	realResult := result.(*follow.FollowServiceFollowResult)
	success, err := handler.(follow.FollowService).Follow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceFollowArgs() interface{} {
	return follow.NewFollowServiceFollowArgs()
}

func newFollowServiceFollowResult() interface{} {
	return follow.NewFollowServiceFollowResult()
}

func unFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceUnFollowArgs)
	realResult := result.(*follow.FollowServiceUnFollowResult)
	success, err := handler.(follow.FollowService).UnFollow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceUnFollowArgs() interface{} {
	return follow.NewFollowServiceUnFollowArgs()
}

func newFollowServiceUnFollowResult() interface{} {
	return follow.NewFollowServiceUnFollowResult()
}

func isFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceIsFollowArgs)
	realResult := result.(*follow.FollowServiceIsFollowResult)
	success, err := handler.(follow.FollowService).IsFollow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceIsFollowArgs() interface{} {
	return follow.NewFollowServiceIsFollowArgs()
}

func newFollowServiceIsFollowResult() interface{} {
	return follow.NewFollowServiceIsFollowResult()
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceFollowListArgs)
	realResult := result.(*follow.FollowServiceFollowListResult)
	success, err := handler.(follow.FollowService).FollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceFollowListArgs() interface{} {
	return follow.NewFollowServiceFollowListArgs()
}

func newFollowServiceFollowListResult() interface{} {
	return follow.NewFollowServiceFollowListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Follow(ctx context.Context, req *follow.FollowReq) (r *follow.FollowResp, err error) {
	var _args follow.FollowServiceFollowArgs
	_args.Req = req
	var _result follow.FollowServiceFollowResult
	if err = p.c.Call(ctx, "Follow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnFollow(ctx context.Context, req *follow.FollowReq) (r *follow.FollowResp, err error) {
	var _args follow.FollowServiceUnFollowArgs
	_args.Req = req
	var _result follow.FollowServiceUnFollowResult
	if err = p.c.Call(ctx, "UnFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFollow(ctx context.Context, req *follow.FollowReq) (r *follow.IsFollorResp, err error) {
	var _args follow.FollowServiceIsFollowArgs
	_args.Req = req
	var _result follow.FollowServiceIsFollowResult
	if err = p.c.Call(ctx, "IsFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, req *follow.FollowListReq) (r *follow.FollowListResp, err error) {
	var _args follow.FollowServiceFollowListArgs
	_args.Req = req
	var _result follow.FollowServiceFollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
