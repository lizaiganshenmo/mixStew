// Code generated by Kitex v0.7.2. DO NOT EDIT.

package interactionservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	interaction "github.com/lizaiganshenmo/mixStew/kitex_gen/interaction"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

var interactionServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*interaction.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateComment":      kitex.NewMethodInfo(createCommentHandler, newInteractionServiceCreateCommentArgs, newInteractionServiceCreateCommentResult, false),
		"DeleteComment":      kitex.NewMethodInfo(deleteCommentHandler, newInteractionServiceDeleteCommentArgs, newInteractionServiceDeleteCommentResult, false),
		"GetComment":         kitex.NewMethodInfo(getCommentHandler, newInteractionServiceGetCommentArgs, newInteractionServiceGetCommentResult, false),
		"CreateCommentReply": kitex.NewMethodInfo(createCommentReplyHandler, newInteractionServiceCreateCommentReplyArgs, newInteractionServiceCreateCommentReplyResult, false),
		"DeleteCommentReply": kitex.NewMethodInfo(deleteCommentReplyHandler, newInteractionServiceDeleteCommentReplyArgs, newInteractionServiceDeleteCommentReplyResult, false),
		"GetCommentReply":    kitex.NewMethodInfo(getCommentReplyHandler, newInteractionServiceGetCommentReplyArgs, newInteractionServiceGetCommentReplyResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "interaction",
		"ServiceFilePath": `idl/interaction.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func createCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceCreateCommentArgs)
	realResult := result.(*interaction.InteractionServiceCreateCommentResult)
	success, err := handler.(interaction.InteractionService).CreateComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceCreateCommentArgs() interface{} {
	return interaction.NewInteractionServiceCreateCommentArgs()
}

func newInteractionServiceCreateCommentResult() interface{} {
	return interaction.NewInteractionServiceCreateCommentResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceDeleteCommentArgs)
	realResult := result.(*interaction.InteractionServiceDeleteCommentResult)
	success, err := handler.(interaction.InteractionService).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceDeleteCommentArgs() interface{} {
	return interaction.NewInteractionServiceDeleteCommentArgs()
}

func newInteractionServiceDeleteCommentResult() interface{} {
	return interaction.NewInteractionServiceDeleteCommentResult()
}

func getCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceGetCommentArgs)
	realResult := result.(*interaction.InteractionServiceGetCommentResult)
	success, err := handler.(interaction.InteractionService).GetComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetCommentArgs() interface{} {
	return interaction.NewInteractionServiceGetCommentArgs()
}

func newInteractionServiceGetCommentResult() interface{} {
	return interaction.NewInteractionServiceGetCommentResult()
}

func createCommentReplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceCreateCommentReplyArgs)
	realResult := result.(*interaction.InteractionServiceCreateCommentReplyResult)
	success, err := handler.(interaction.InteractionService).CreateCommentReply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceCreateCommentReplyArgs() interface{} {
	return interaction.NewInteractionServiceCreateCommentReplyArgs()
}

func newInteractionServiceCreateCommentReplyResult() interface{} {
	return interaction.NewInteractionServiceCreateCommentReplyResult()
}

func deleteCommentReplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceDeleteCommentReplyArgs)
	realResult := result.(*interaction.InteractionServiceDeleteCommentReplyResult)
	success, err := handler.(interaction.InteractionService).DeleteCommentReply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceDeleteCommentReplyArgs() interface{} {
	return interaction.NewInteractionServiceDeleteCommentReplyArgs()
}

func newInteractionServiceDeleteCommentReplyResult() interface{} {
	return interaction.NewInteractionServiceDeleteCommentReplyResult()
}

func getCommentReplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceGetCommentReplyArgs)
	realResult := result.(*interaction.InteractionServiceGetCommentReplyResult)
	success, err := handler.(interaction.InteractionService).GetCommentReply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetCommentReplyArgs() interface{} {
	return interaction.NewInteractionServiceGetCommentReplyArgs()
}

func newInteractionServiceGetCommentReplyResult() interface{} {
	return interaction.NewInteractionServiceGetCommentReplyResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateComment(ctx context.Context, req *interaction.CreateCommentReq) (r *interaction.CreateCommentResp, err error) {
	var _args interaction.InteractionServiceCreateCommentArgs
	_args.Req = req
	var _result interaction.InteractionServiceCreateCommentResult
	if err = p.c.Call(ctx, "CreateComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *interaction.DeleteCommentReq) (r *interaction.DeleteCommentResp, err error) {
	var _args interaction.InteractionServiceDeleteCommentArgs
	_args.Req = req
	var _result interaction.InteractionServiceDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetComment(ctx context.Context, req *interaction.GetCommentReq) (r *interaction.GetCommentResp, err error) {
	var _args interaction.InteractionServiceGetCommentArgs
	_args.Req = req
	var _result interaction.InteractionServiceGetCommentResult
	if err = p.c.Call(ctx, "GetComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateCommentReply(ctx context.Context, req *interaction.CreateCommentReplyReq) (r *interaction.CreateCommentReplyResp, err error) {
	var _args interaction.InteractionServiceCreateCommentReplyArgs
	_args.Req = req
	var _result interaction.InteractionServiceCreateCommentReplyResult
	if err = p.c.Call(ctx, "CreateCommentReply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCommentReply(ctx context.Context, req *interaction.DeleteCommentReplyReq) (r *interaction.DeleteCommentReplyResp, err error) {
	var _args interaction.InteractionServiceDeleteCommentReplyArgs
	_args.Req = req
	var _result interaction.InteractionServiceDeleteCommentReplyResult
	if err = p.c.Call(ctx, "DeleteCommentReply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentReply(ctx context.Context, req *interaction.GetCommentReplyReq) (r *interaction.GetCommentReplyResp, err error) {
	var _args interaction.InteractionServiceGetCommentReplyArgs
	_args.Req = req
	var _result interaction.InteractionServiceGetCommentReplyResult
	if err = p.c.Call(ctx, "GetCommentReply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
